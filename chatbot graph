{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvXf7tVY+laULDY+ERQfMV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tehrimzahra/00_edges_nodes_graph.ipynb/blob/main/chatbot%20graph\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "7NNyOnspodW1"
      },
      "outputs": [],
      "source": [
        "%%capture --no-stderr\n",
        "%pip install --quiet -U langgraph"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from typing_extensions import TypedDict\n",
        "\n",
        "class LearningState(TypedDict):\n",
        "    prompt: str"
      ],
      "metadata": {
        "id": "tBV6TAy-sggp"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: create an example from above LearningState\n",
        "lahore_state: LearningState = LearningState(prompt= \"hello from UMT Lahore\")"
      ],
      "metadata": {
        "id": "xIBaWLSNsvR5"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(lahore_state)\n",
        "print(lahore_state['prompt'])\n",
        "print(lahore_state['prompt'] +\" I am\")\n",
        "print(lahore_state)\n",
        "print(type(lahore_state))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7256dW2s8XV",
        "outputId": "e2af8ba0-dc5a-4e8d-d880-934ce8cb1ba1"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'prompt': 'hello from UMT Lahore'}\n",
            "hello from UMT Lahore\n",
            "hello from UMT Lahore I am\n",
            "{'prompt': 'hello from UMT Lahore'}\n",
            "<class 'dict'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def node_1(state: LearningState) -> LearningState:\n",
        "    print(\"---Node 1 State---\", state)\n",
        "    return {\"prompt\": state['prompt'] +\" I am\"}\n",
        "\n",
        "def node_2(state: LearningState) -> LearningState:\n",
        "    print(\"---Node 2 State---\", state)\n",
        "    return {\"prompt\": state['prompt'] +\" happy!\"}"
      ],
      "metadata": {
        "id": "_lyUy0WwtMa-"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Image, display # Preview Graph\n",
        "\n",
        "from langgraph.graph import StateGraph, START, END\n",
        "from langgraph.graph.state import CompiledStateGraph # type\n",
        "\n",
        "# Build graph\n",
        "builder: StateGraph = StateGraph(state_schema=LearningState)\n"
      ],
      "metadata": {
        "id": "5BL7mi6mtxgH"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(builder))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "djPAn14Wt4te",
        "outputId": "3382d715-b13e-4d69-e52d-39f9459c8abf"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'langgraph.graph.state.StateGraph'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Nodes\n",
        "builder.add_node(\"node_1\", node_1)\n",
        "builder.add_node(\"node_2\", node_2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4WETWEj3uBNC",
        "outputId": "0cc8be9b-1d49-4b5d-b84a-fe38ce0a7144"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<langgraph.graph.state.StateGraph at 0x7a0f93da3d90>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simples Edges Logic\n",
        "builder.add_edge(START, \"node_1\")\n",
        "builder.add_edge(\"node_1\", \"node_2\")\n",
        "builder.add_edge(\"node_2\", END)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tggXfEvMuKPr",
        "outputId": "a8418437-ac42-46cb-a61e-c863918d0666"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<langgraph.graph.state.StateGraph at 0x7a0f93da3d90>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Add\n",
        "graph: CompiledStateGraph = builder.compile()"
      ],
      "metadata": {
        "id": "ytqb3FnguWzq"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(graph)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yqPKiJs_ue4V",
        "outputId": "09eba84a-9517-4644-fcd5-c8a992e6d1d8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<langgraph.graph.state.CompiledStateGraph object at 0x7a0fa895e650>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(graph.get_graph())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lAaeP8eQumsK",
        "outputId": "53bc050b-5334-4dbf-b5b9-f610e23d6330"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Graph(nodes={'__start__': Node(id='__start__', name='__start__', data=<class 'langchain_core.utils.pydantic.LangGraphInput'>, metadata=None), 'node_1': Node(id='node_1', name='node_1', data=node_1(tags=None, recurse=True, func_accepts_config=False, func_accepts={'writer': False, 'store': False}), metadata=None), 'node_2': Node(id='node_2', name='node_2', data=node_2(tags=None, recurse=True, func_accepts_config=False, func_accepts={'writer': False, 'store': False}), metadata=None), '__end__': Node(id='__end__', name='__end__', data=<class 'langchain_core.utils.pydantic.LangGraphOutput'>, metadata=None)}, edges=[Edge(source='__start__', target='node_1', data=None, conditional=False), Edge(source='node_1', target='node_2', data=None, conditional=False), Edge(source='node_2', target='__end__', data=None, conditional=False)])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# View\n",
        "display(Image(graph.get_graph().draw_mermaid_png()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "jVQdB9w6uttB",
        "outputId": "0e78e247-0f29-44fb-cca1-e6841703c8fd"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "graph.invoke({\"prompt\" : \"Hi\"})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xh0B_i2vHEl",
        "outputId": "1a737d04-53b9-4316-98e0-5bd53403534d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---Node 1 State--- {'prompt': 'Hi'}\n",
            "---Node 2 State--- {'prompt': 'Hi I am'}\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'prompt': 'Hi I am happy!'}"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install -q -U langchain\n",
        "%pip install -q -U langchain-google-genai"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XWuCk4tRvQkR",
        "outputId": "66455aa4-919b-42b8-90bc-5b71eff0515f"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m411.6/411.6 kB\u001b[0m \u001b[31m23.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.5/41.5 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import userdata\n",
        "google_api_key = userdata.get('GEMINI_API_KEY')\n"
      ],
      "metadata": {
        "id": "DMsOK-xnvTZr"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from langchain_google_genai import ChatGoogleGenerativeAI\n",
        "\n",
        "# Initialize an instance of the ChatGoogleGenerativeAI with specific parameters\n",
        "llm: ChatGoogleGenerativeAI = ChatGoogleGenerativeAI(\n",
        "    model=\"gemini-1.5-flash\",  # Specify the model to use\n",
        "    api_key=google_api_key,     # Provide the Google API key for authentication\n",
        ")"
      ],
      "metadata": {
        "id": "fCY60z5zv98Q"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Import the AIMessage class currently will be used for typing\n",
        "from langchain_core.messages.ai import AIMessage\n",
        "\n",
        "ai_msg: AIMessage = llm.invoke(\"Hi?\")"
      ],
      "metadata": {
        "id": "ur4kGWOHwCNj"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(ai_msg.content)\n",
        "print(type(ai_msg.content))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ClW6BNWwTvL",
        "outputId": "b9919446-04d9-4655-a10e-c5de076a1bfe"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hi there! How can I help you today?\n",
            "<class 'str'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from typing_extensions import TypedDict\n",
        "\n",
        "class FirstLLMAgentCall(TypedDict):\n",
        "    prompt: str\n",
        "    output: str"
      ],
      "metadata": {
        "id": "XDAhpBH0wWcI"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def node_1(state: FirstLLMAgentCall):\n",
        "    print(\"---Node 1---\", state)\n",
        "    prompt = state[\"prompt\"]\n",
        "    ai_msg: AIMessage = llm.invoke(prompt)\n",
        "    return {\"output\": ai_msg.content}"
      ],
      "metadata": {
        "id": "rE0Ml8nQwggr"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "zeeshan_bhai_greet_message = node_1(FirstLLMAgentCall(prompt=\"Hello from UMT\"))\n",
        "print(zeeshan_bhai_greet_message)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZw9XJf0xVXb",
        "outputId": "6cc2570e-ff1a-460d-c000-91cfb8e7a0f7"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---Node 1--- {'prompt': 'Hello from UMT'}\n",
            "{'output': 'Hello from here!  Is there anything I can help you with today?'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Image, display # Preview Graph"
      ],
      "metadata": {
        "id": "MOBKcqHKxX6M"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Image, display # Preview Graph\n",
        "\n",
        "from langgraph.graph import StateGraph, START, END\n",
        "from langgraph.graph.state import CompiledStateGraph # type\n",
        "\n",
        "# Build graph\n",
        "builder: StateGraph = StateGraph(state_schema=FirstLLMAgentCall)\n",
        "\n",
        "# Define Nodes\n",
        "builder.add_node(\"node_1\", node_1)\n",
        "\n",
        "# Add Edges\n",
        "builder.add_edge(START, \"node_1\")\n",
        "builder.add_edge(\"node_1\", END)\n",
        "\n",
        "# Compile Graph\n",
        "graph: CompiledStateGraph = builder.compile()"
      ],
      "metadata": {
        "id": "6ojPCa12xexF"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# View\n",
        "display(Image(graph.get_graph().draw_mermaid_png()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "id": "0sfdifjOxp7K",
        "outputId": "dffe80e3-2498-4244-8f0a-4d4120a7b226"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = graph.invoke({\"prompt\" : \"Motivate me to learn LangGraph\"})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FqRdFPtExx7f",
        "outputId": "f8906268-502c-4759-92a1-10a29f24966f"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---Node 1--- {'prompt': 'Motivate me to learn LangGraph'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RKDWeZjQx8e0",
        "outputId": "f9d30e58-f46a-4992-ed7c-9368304d8690"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'prompt': 'Motivate me to learn LangGraph', 'output': \"Let's talk about why you should learn LangGraph.  It's not just another language model; it offers a unique approach with compelling advantages.  Here's some motivation broken down by benefit:\\n\\n**1.  Unlock the Power of Knowledge Graphs:**  LangGraph isn't just about text; it's about *understanding* the relationships between things.  Imagine being able to easily query complex information across diverse datasets, going beyond simple keyword searches.  LangGraph empowers you to build applications that reason and draw inferences, not just regurgitate facts. This is a huge leap forward in data analysis and application development.\\n\\n**2.  Become a Highly Sought-After Skill:**  The ability to work with knowledge graphs and language models that integrate them is a rapidly growing field.  Mastering LangGraph puts you ahead of the curve, making you a valuable asset to companies needing to extract insights from increasingly complex data.  Think competitive advantage in the job market.\\n\\n**3.  Build Innovative Applications:**  LangGraph opens doors to exciting projects.  Imagine:\\n\\n* **Intelligent chatbots:**  That understand context and provide truly insightful answers, not just canned responses.\\n* **Personalized recommendations:**  Going far beyond simple collaborative filtering.\\n* **Advanced search engines:**  That truly understand the meaning behind queries.\\n* **Automated report generation:**  Extracting key information and insights from complex datasets.\\n* **Drug discovery and development:**  By analyzing vast biological datasets and identifying novel relationships.\\n\\n**4.  A Deep Dive into Cutting-Edge AI:**  Learning LangGraph means delving into the forefront of AI research.  You'll be working with sophisticated techniques at the intersection of natural language processing and knowledge representation.  This is intellectually stimulating and will significantly enhance your understanding of AI's capabilities and limitations.\\n\\n**5.  A Rewarding Learning Journey:**  While it might require effort, mastering LangGraph is a deeply rewarding experience.  You'll be building practical skills, expanding your knowledge, and contributing to a field shaping the future.  The sense of accomplishment from building something truly innovative is unparalleled.\\n\\n\\nDon't just think of LangGraph as another tool; think of it as a key that unlocks a world of possibilities.  Are you ready to unlock your potential?  The journey starts now.\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# just another helpter function\n",
        "import textwrap\n",
        "from IPython.display import display, Markdown\n",
        "\n",
        "def to_markdown(text)-> Markdown:\n",
        "    text : str = text.replace(\"•\", \"  *\")\n",
        "    return Markdown(textwrap.indent(text, \"> \", predicate=lambda _: True))"
      ],
      "metadata": {
        "id": "EHKUKjejyL-8"
      },
      "execution_count": 29,
      "outputs": []
    }
  ]
}